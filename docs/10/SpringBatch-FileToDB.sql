# 파일 읽어 DB에 쓰는 Job 실행
## 1. 
SELECT JOB_INSTANCE_ID, JOB_NAME from BATCH_JOB_INSTANCE where JOB_NAME = ? and JOB_KEY = ?;

# 2. 현재 작업을 위한 JobName에 대한 가장 최근 JOB_INSTANCE_ID 값 확인
SELECT JOB_INSTANCE_ID, JOB_NAME 
from BATCH_JOB_INSTANCE I1 
where I1.JOB_NAME = 'batch_FILE_TO_TMP' and I1.JOB_INSTANCE_ID in (SELECT max(I2.JOB_INSTANCE_ID) from BATCH_JOB_INSTANCE I2 where I2.JOB_NAME = 'batch_FILE_TO_TMP');

# 3. 이전에 수행된 JobExecutionId 이력 중 가장 최신 JobExecutionId 조회
SELECT JOB_EXECUTION_ID, START_TIME, END_TIME, STATUS, EXIT_CODE, EXIT_MESSAGE, CREATE_TIME, LAST_UPDATED, VERSION, JOB_CONFIGURATION_LOCATION 
from BATCH_JOB_EXECUTION E 
where JOB_INSTANCE_ID = '709'
and JOB_EXECUTION_ID in (
	SELECT max(JOB_EXECUTION_ID) from BATCH_JOB_EXECUTION E2 where E2.JOB_INSTANCE_ID = '709'
);

# 4. 파라미터 확인 
SELECT JOB_EXECUTION_ID, KEY_NAME, TYPE_CD, STRING_VAL, DATE_VAL, LONG_VAL, DOUBLE_VAL, IDENTIFYING 
from BATCH_JOB_EXECUTION_PARAMS 
where JOB_EXECUTION_ID = '755';

# 5. 해당 동일 쿼리 3번 날림
SELECT JOB_INSTANCE_ID, JOB_NAME 
from BATCH_JOB_INSTANCE where JOB_NAME = ? and JOB_KEY = ?;

SELECT * FROM BATCH_JOB_INSTANCE ORDER BY 1 DESC;
# 해당 Job은 다수 실행되어 job instance id가 생성되어 있다.
SELECT * FROM BATCH_JOB_INSTANCE WHERE 1=1 AND JOB_NAME = 'batch_FILE_TO_TMP' ORDER BY JOB_INSTANCE_ID DESC;
# 6. JOB_NAME, VERSION은 사용자 정의에 따라 생성될 수 있음, Job_INSTANCE_ID는 일련의 순서로 생성, Job Key는 프레임워크에서 생성하는 것으로 보임
INSERT into BATCH_JOB_INSTANCE(JOB_INSTANCE_ID, JOB_NAME, JOB_KEY, VERSION) values (?, ?, ?, ?);

SELECT * FROM BATCH_JOB_EXECUTION ORDER BY LAST_UPDATED DESC;
# 유일한 값인 Job Instance Id를 통해 특정 시간에 특정한 파라미터를 통해 실행된 이력을 확인할 수 있다.
SELECT * FROM BATCH_JOB_EXECUTION WHERE 1=1 AND JOB_INSTANCE_ID = 709;
# 7. 
INSERT into BATCH_JOB_EXECUTION (
	JOB_EXECUTION_ID, JOB_INSTANCE_ID, START_TIME, END_TIME, STATUS, EXIT_CODE, EXIT_MESSAGE, VERSION, CREATE_TIME, LAST_UPDATED, JOB_CONFIGURATION_LOCATION
) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

# job execution 에 대한 파라미터를 조회할 수 있음
SELECT * FROM BATCH_JOB_EXECUTION_PARAMS ORDER BY JOB_EXECUTION_ID DESC;
SELECT JOB_EXECUTION_ID, COUNT(1) FROM BATCH_JOB_EXECUTION_PARAMS GROUP BY JOB_EXECUTION_ID HAVING COUNT(1) > 2;
SELECT * FROM BATCH_JOB_EXECUTION_PARAMS WHERE 1=1 AND JOB_EXECUTION_ID = 29;
# 8. 동일한 JOB_EXECUTION_ID가 존재하는 것을 확인, run.id와 version 파라미터로 실행하여 2개씩 삽입, run.id, version, job.name 파라미터 3개로 실행하면 해당 테이블에 job execution id로 3개씩 들어가 있음
INSERT into BATCH_JOB_EXECUTION_PARAMS(
	JOB_EXECUTION_ID, KEY_NAME, TYPE_CD, STRING_VAL, DATE_VAL, LONG_VAL, DOUBLE_VAL, IDENTIFYING
) values (?, ?, ?, ?, ?, ?, ?, ?);

# SHORT_CONTEXT: SERIALIZED_CONTEXT의 버전을 나타내는 문자열
SELECT * FROM BATCH_JOB_EXECUTION_CONTEXT ORDER BY 1 DESC;
# 9. 실행 context ?
INSERT INTO BATCH_JOB_EXECUTION_CONTEXT (SHORT_CONTEXT, SERIALIZED_CONTEXT, JOB_EXECUTION_ID) VALUES(?, ?, ?);

## [name=batch_FILE_TO_TMP]] launched with the following parameters: [{run.id=12, version=5}]
## Job execution starting: JobExecution: id=755, version=0, startTime=null, endTime=null, lastUpdated=Tue Oct 20 19:59:11 KST 2020, status=STARTING, exitStatus=exitCode=UNKNOWN;exitDescription=, job=[JobInstance: id=709, version=0, Job=[batch_FILE_TO_TMP]], jobParameters=[{run.id=12, version=5}]

# 10. version 확인
SELECT VERSION FROM BATCH_JOB_EXECUTION WHERE JOB_EXECUTION_ID=29;

# 11. 실행 값이 2개 이상일 수가 있나?
SELECT COUNT(*) FROM BATCH_JOB_EXECUTION WHERE JOB_EXECUTION_ID = 29;

SELECT * FROM BATCH_JOB_EXECUTION WHERE 1=1 AND JOB_EXECUTION_ID = 755 AND VERSION = 2;

# 12. version 2, job_execution_id 755
# 동일한 execution id와 version 정보로 다시 수행될 수 있다는 뜻 ?
UPDATE BATCH_JOB_EXECUTION
set START_TIME = ?, END_TIME = ?,  STATUS = ?, EXIT_CODE = ?, EXIT_MESSAGE = ?, VERSION = ?, CREATE_TIME = ?, LAST_UPDATED = ?
where JOB_EXECUTION_ID = ?
and VERSION = ?;

# 13. JOB에 따른 STEP 조회하기 JOB_INSTANCE_ID 709, STEP_NAME batch_FILE_TO_TMP_STEP
SELECT
    SE.STEP_EXECUTION_ID, SE.STEP_NAME, SE.START_TIME, SE.END_TIME, SE.STATUS, SE.COMMIT_COUNT, SE.READ_COUNT, SE.FILTER_COUNT, SE.WRITE_COUNT, SE.EXIT_CODE, SE.EXIT_MESSAGE, SE.READ_SKIP_COUNT, SE.WRITE_SKIP_COUNT, SE.PROCESS_SKIP_COUNT, SE.ROLLBACK_COUNT, SE.LAST_UPDATED, SE.VERSION, JE.JOB_EXECUTION_ID, JE.START_TIME, JE.END_TIME, JE.STATUS, JE.EXIT_CODE, JE.EXIT_MESSAGE, JE.CREATE_TIME, JE.LAST_UPDATED, JE.VERSION
from BATCH_JOB_EXECUTION JE, BATCH_STEP_EXECUTION SE
where SE.JOB_EXECUTION_ID in (SELECT JOB_EXECUTION_ID from BATCH_JOB_EXECUTION where JOB_INSTANCE_ID = 709)
  and SE.JOB_EXECUTION_ID = JE.JOB_EXECUTION_ID
  and SE.STEP_NAME = 'batch_FILE_TO_TMP_STEP'
order by SE.START_TIME desc, SE.STEP_EXECUTION_ID desc;

# 14.
SELECT
    JOB_EXECUTION_ID, START_TIME, END_TIME, STATUS, EXIT_CODE, EXIT_MESSAGE, CREATE_TIME, LAST_UPDATED, VERSION, JOB_CONFIGURATION_LOCATION
from BATCH_JOB_EXECUTION
where JOB_INSTANCE_ID = 709
order by JOB_EXECUTION_ID desc;

# 15.
SELECT
    JOB_EXECUTION_ID, KEY_NAME, TYPE_CD, STRING_VAL, DATE_VAL, LONG_VAL, DOUBLE_VAL, IDENTIFYING
from BATCH_JOB_EXECUTION_PARAMS
where JOB_EXECUTION_ID = 755;


#16. step execution id 조회
SELECT
    STEP_EXECUTION_ID, STEP_NAME, START_TIME, END_TIME, STATUS, COMMIT_COUNT, READ_COUNT, FILTER_COUNT, WRITE_COUNT, EXIT_CODE, EXIT_MESSAGE, READ_SKIP_COUNT, WRITE_SKIP_COUNT, PROCESS_SKIP_COUNT, ROLLBACK_COUNT, LAST_UPDATED, VERSION
from BATCH_STEP_EXECUTION
where JOB_EXECUTION_ID = 755
order by STEP_EXECUTION_ID;

# 17.
INSERT into BATCH_STEP_EXECUTION (
    STEP_EXECUTION_ID, VERSION, STEP_NAME, JOB_EXECUTION_ID, START_TIME, END_TIME, STATUS, COMMIT_COUNT, READ_COUNT, FILTER_COUNT, WRITE_COUNT, EXIT_CODE, EXIT_MESSAGE, READ_SKIP_COUNT, WRITE_SKIP_COUNT, PROCESS_SKIP_COUNT, ROLLBACK_COUNT, LAST_UPDATED)
values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

# 18.
INSERT INTO BATCH_STEP_EXECUTION_CONTEXT (
    SHORT_CONTEXT, SERIALIZED_CONTEXT, STEP_EXECUTION_ID
) VALUES (?, ?, ?)

## Executing step: [batch_FILE_TO_TMP_STEP]
## Executing: id=884

# 19.
UPDATE BATCH_STEP_EXECUTION
set START_TIME = ?, END_TIME = ?, STATUS = ?, COMMIT_COUNT = ?, READ_COUNT = ?, FILTER_COUNT = ?, WRITE_COUNT = ?, EXIT_CODE = ?, EXIT_MESSAGE = ?, VERSION = ?, READ_SKIP_COUNT = ?, PROCESS_SKIP_COUNT = ?, WRITE_SKIP_COUNT = ?, ROLLBACK_COUNT = ?, LAST_UPDATED = ?
where STEP_EXECUTION_ID = ?
and VERSION = ?

# 20.
SELECT VERSION FROM BATCH_JOB_EXECUTION WHERE JOB_EXECUTION_ID=?

# 21.
UPDATE BATCH_STEP_EXECUTION_CONTEXT
SET SHORT_CONTEXT = ?, SERIALIZED_CONTEXT = ?
WHERE STEP_EXECUTION_ID = ?